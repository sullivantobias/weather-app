{"version":3,"sources":["components/header/index.js","components/currentDayMain/index.js","components/currentDayAdvanced/index.js","components/forecast/index.js","components/loader/index.js","components/serviceContainer/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","city","date","className","CurrentDayMain","icon","temp","desc","Number","toFixed","CurrentDayAdvanced","high","wind","humidity","sunrise","sunset","ForeCast","time","i","src","Loader","ServiceContainer","done","useState","error","setError","loaded","setLoaded","cityNoFound","setCityNotFound","setCity","currentDay","setCurrentDay","forecast","setForecast","appearing","setAppearing","wIcon","setWIcon","textInput","createRef","useEffect","APIkey","process","Promise","all","fetch","then","resp","json","result","cod","setDate","dt","setTime","sys","mainInfos","name","weather","description","main","advanced","temp_max","speed","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","list","map","setTimeout","ts","addZero","Date","getHours","getMinutes","getDay","getDate","getMonth","onSubmit","e","preventDefault","current","value","ref","placeholder","faSearch","length","item","key","App","setDone","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8c501cd2.chunk.js","sourcesContent":["import React from 'react';\nimport './index.scss';\n\nexport const Header = ({ city, date, className }) => {\n    return (\n        <div className={`cmp-header ${className}`}>\n            <h1>{ city }</h1>\n            <h3>{ date }</h3>\n        </div>\n    );\n}\n","import React from 'react';\nimport './index.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport const CurrentDayMain = ({ icon, temp, desc, className }) => {\n    return (\n        <>\n        {icon && temp && desc &&\n            <div className={`cmp-currentDayMain ${className}`}>\n                <div className=\"cmp-currentDayMain--title\">Today</div>\n                <FontAwesomeIcon className=\"cmp-currentDayMain--icon\" icon={ icon }/>\n                <div className=\"cmp-currentDayMain--deg\">{ `${Number(temp).toFixed()}°` }</div>\n                <div className=\"cmp-currentDayMain--desc\">{ desc }</div>\n            </div>\n        }\n        </>\n    );\n}\n","import React from 'react';\nimport './index.scss';\n\nexport const CurrentDayAdvanced = ({ high, wind, humidity, sunrise, sunset }) => {\n    return (\n        <div className=\"cmp-currentDayAdvanced\">\n            <div className=\"cmp-currentDayAdvanced--high item\"><span>Hight</span> { high.toFixed() }°</div>\n            <div className=\"cmp-currentDayAdvanced--wind item\"><span>Wind</span>{ wind }mph</div>\n            <div className=\"cmp-currentDayAdvanced--rain item\"><span>Humidity</span>{ humidity }%</div>\n            <div className=\"cmp-currentDayAdvanced--sunrise item\"><span>Sunrise</span>{ sunrise }</div>\n            <div className=\"cmp-currentDayAdvanced--sunset item\"><span>Sunset</span>{ sunset }</div>\n        </div>\n    );\n}\n","import React from 'react';\nimport './index.scss';\n\nexport const ForeCast = ({ icon, temp, date, time }) => {\n    const i = icon && `https://openweathermap.org/img/w/${icon}.png`;\n\n    return (\n        <>\n            {icon && temp && date && time &&\n                <div className=\"cmp-forecast\">\n                    <div className=\"cmp-forecast--date\">{date}</div>\n                    <div className=\"cmp-forecast--time\">{time}</div>\n                    <img className=\"cmp-forecast--icon\" src={i}></img>\n                    <div className=\"cmp-forecast--temp\">{`${Number(temp).toFixed()}°`}</div>\n                </div>\n            }\n        </>\n    );\n}\n","import React from 'react';\nimport './index.scss';\n\nexport const Loader = () => {\n    return (\n        <div className=\"cmp-loader\">\n            <div className=\"ball\"></div>\n            <div className=\"loader\"></div>\n            <div className=\"loader2\"></div>\n            <div className=\"loader3\"></div>\n        </div>\n    );\n};\n","import React, { useEffect, useState, createRef } from 'react';\nimport { Header } from '../header';\nimport { CurrentDayMain } from '../currentDayMain';\nimport { CurrentDayAdvanced } from '../currentDayAdvanced';\nimport { ForeCast } from '../forecast';\nimport { Loader } from '../loader';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n    faSearch,\n    faBolt,\n    faCloudRain,\n    faCloudShowersHeavy,\n    faSnowflake,\n    faSun,\n    faCloud,\n    faSmog\n} from '@fortawesome/free-solid-svg-icons'\n\nimport './index.scss';\n\nexport const ServiceContainer = ({ done = false }) => {\n    const [error, setError] = useState(null);\n    const [loaded, setLoaded] = useState(false);\n    const [cityNoFound, setCityNotFound] = useState('');\n    const [city, setCity] = useState('');\n    const [currentDay, setCurrentDay] = useState({});\n    const [forecast, setForecast] = useState({});\n    const [appearing, setAppearing] = useState(false);\n    const [wIcon, setWIcon] = useState(null);\n    const textInput = createRef();\n\n\n    useEffect(() => {\n        const APIkey = process.env.REACT_APP_API_KEY;\n        done(false);\n\n        city && Promise.all([\n            fetch(`https://api.openweathermap.org/data/2.5/weather?q=${ city }&units=metric&appid=${ APIkey }`).then(resp => resp.json()),\n            fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${ city }&units=metric&appid=${ APIkey }`).then(resp => resp.json()),\n        ]).then(result => {\n\n                if (result[0].cod !== '404' || !city) {\n                    setCityNotFound('');\n                    setLoaded(false);\n                    setAppearing(false);\n\n                    const date = setDate(result[0].dt)\n                    const sunrise = setTime(result[0].sys.sunrise);\n                    const sunset = setTime(result[0].sys.sunset);\n                    const mainInfos = {\n                        name: result[0].name,\n                        date,\n                        icon: result[0].weather[0].icon,\n                        desc: result[0].weather[0].description,\n                        temp: result[0].main.temp,\n                        advanced: {\n                            high: result[0].main.temp_max,\n                            wind: result[0].wind.speed,\n                            humidity: result[0].main.humidity,\n                            sunrise,\n                            sunset\n                        }\n                    };\n\n                    const { main } = result[0].weather[0];\n\n                    if (main === 'Thunderstorm') {\n                        setWIcon(faBolt);\n                    } else if (main === 'Drizzle') {\n                        setWIcon(faCloudRain)\n                    } else if (main === 'Rain') {\n                        setWIcon(faCloudShowersHeavy)\n                    } else if (main === 'Snow') {\n                        setWIcon(faSnowflake)\n                    } else if (main === 'Clear') {\n                        setWIcon(faSun)\n                    } else if (main === 'Clouds') {\n                        setWIcon(faCloud)\n                    } else {\n                        setWIcon(faSmog);\n                    }\n\n                    const forecast = result[1].list.map(({ dt, weather, main }) => {\n                        return {\n                            date: setDate(dt),\n                            time: setTime(dt),\n                            icon: weather[0].icon,\n                            temp: main.temp_max\n                        }\n                    });\n\n                    setCurrentDay(mainInfos);\n                    setForecast(forecast);\n                    setTimeout(() => {\n                        done(true);\n                        setLoaded(true)\n                    }, 1000);\n                    setTimeout(() => setAppearing(true), 1100)\n                } else {\n                    setLoaded(true);\n                    setCityNotFound('Sorry, we did not find this city');\n                    setAppearing(false)\n                }\n            },\n            error => {\n                setError(error);\n                setLoaded(true)\n            })\n    }, [city]);\n\n    const setTime = (ts) => {\n        const addZero = i => {\n            i < 10 && (i = \"0\" + i);\n\n            return i;\n        };\n\n        const date = new Date(ts * 1000);\n        const time = `${ addZero(date.getHours()) }:${ addZero(date.getMinutes()) }`\n\n        return time;\n    };\n\n    const setDate = (ts) => {\n        const date = new Date(ts * 1000);\n\n        const months = [\n            'January',\n            'February',\n            'March',\n            'April',\n            'May',\n            'June',\n            'July',\n            'August',\n            'September',\n            'October',\n            'Nocvember',\n            'December',\n        ];\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n        const newDate = `${ days[date.getDay()] } ${ date.getDate() } ${\n            months[date.getMonth()]\n        }`;\n\n        return newDate;\n    }\n\n    return (\n        <div className={ `cmp-service-container ${ city ? 'loaded' : '' } ${ appearing ? 'appearing' : '' }` }>\n            <h1 className={ 'cmp-service-container--title' }>Enjoy the app</h1>\n            <form className={ `cmp-service-container__form` } onSubmit={ e => {\n                e.preventDefault();\n                setCity(textInput.current.value);\n            } }>\n                <input ref={ textInput } placeholder='City Name'/>\n                <FontAwesomeIcon icon={ faSearch }/>\n            </form>\n\n            { loaded ?\n                <>\n                    { !cityNoFound && city && (\n                        <>\n                            <Header city={ currentDay.name } date={ currentDay.date }/>\n                            <CurrentDayMain desc={ currentDay.desc } icon={ wIcon } temp={ currentDay.temp }/>\n\n                            { loaded &&\n                            currentDay.advanced && <CurrentDayAdvanced { ...currentDay.advanced } />\n\n                            }\n                            <div className={ 'cmp-service-container__forcastcontainer' }>\n                                { forecast.length && forecast.map((item, i) => (\n                                    <ForeCast key={ i } { ...item } />\n                                )) }\n                            </div>\n                        </>\n                    ) }\n                    { cityNoFound && <div className='cmp-service-container--error'>{ cityNoFound || error }</div> }\n\n                </> : city && <Loader/>\n            }\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport { ServiceContainer } from './components/serviceContainer';\nimport './index.scss';\n\nconst App = () => {\n    const [done, setDone] = useState(false);\n    return (\n        <div className={`App ${!done ? 'viewHeight' : ''}`}>\n            <ServiceContainer done={value => setDone(value)}/>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}